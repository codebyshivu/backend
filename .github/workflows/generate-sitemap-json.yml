name: Generate files.json & songs.json

permissions:
  contents: write  # allow workflow to push

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # use PAT for push

      # Step 2: Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Step 3: Generate JSONs
      - name: Generate files.json & songs.json
        run: |
          python3 - <<'EOF'
          import os, json

          GITHUB_BASE_URL = "https://codebyshivu.github.io/backend/"
          LOCAL_BASE_PATH = ".appdata/"
          ROOT = "."  # scan entire repository

          files_sitemap = {}
          songs_sitemap = {}

          IGNORE_FOLDERS = {"song/banner", "song/details"}  # folders to skip for files.json

          for root_dir, dirs, files in os.walk(ROOT):
              normalized_root = os.path.relpath(root_dir, ROOT).replace("\\", "/").lower()
              if normalized_root in IGNORE_FOLDERS:
                  continue

              for f in files:
                  if f.endswith(('.txt', '.mp3', '.json', '.md')):
                      rel_path = os.path.relpath(os.path.join(root_dir, f), ROOT)
                      parts = rel_path.split(os.sep)

                      folder = parts[0].lower() if len(parts) > 1 else "root"
                      github_url = GITHUB_BASE_URL + rel_path.replace("\\", "/")
                      local_path = os.path.join(LOCAL_BASE_PATH, f".{folder}", f).replace("\\", "/")

                      # Skip files.json and songs.json themselves
                      if folder == "root" and f in ("files.json", "songs.json"):
                          continue

                      # Handle Song folder separately
                      if folder == "song" and normalized_root == "song":
                          if folder not in songs_sitemap:
                              songs_sitemap[folder] = []

                          filename_no_ext = os.path.splitext(f)[0]
                          banner_url = f"{GITHUB_BASE_URL}Song/Banner/{filename_no_ext}.jpg"
                          details_url = f"{GITHUB_BASE_URL}Song/Details/{filename_no_ext}.txt"

                          songs_sitemap[folder].append({
                              "url": github_url,
                              "path": local_path,
                              "banner": banner_url,
                              "details": details_url
                          })
                      else:
                          if folder not in files_sitemap:
                              files_sitemap[folder] = []
                          files_sitemap[folder].append({
                              "url": github_url,
                              "path": local_path
                          })

          # Write JSON files
          with open("files.json", "w", encoding="utf-8") as fp:
              json.dump(files_sitemap, fp, indent=4, ensure_ascii=False)

          with open("songs.json", "w", encoding="utf-8") as fp:
              json.dump(songs_sitemap, fp, indent=4, ensure_ascii=False)

          print(f"✅ files.json generated with {sum(len(v) for v in files_sitemap.values())} files")
          print(f"✅ songs.json generated with {sum(len(v) for v in songs_sitemap.values())} songs")
          EOF

      # Step 4: Commit and push changes using PAT
      - name: Commit and push
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -z "$GH_PAT" ]; then
            echo "❌ GitHub PAT is missing!"
            exit 1
          fi

          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add files.json songs.json
          git commit -m "Auto update files.json & songs.json" || echo "No changes"
          git push https://$GH_PAT@github.com/${{ github.repository }} HEAD:main
